plugins {
	id 'org.springframework.boot' version '2.3.7.RELEASE'  apply false
	id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
	id 'org.asciidoctor.convert' version '1.5.8' apply false

	id 'org.jetbrains.kotlin.jvm' version '1.4.21' apply false
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.4.21' apply false
	id 'org.jetbrains.kotlin.plugin.noarg' version '1.4.21' apply false
	id 'org.jetbrains.kotlin.plugin.allopen' version '1.4.21' apply false
	id 'org.jetbrains.kotlin.plugin.spring' version '1.4.21' apply false

	id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
	id 'co.uzzu.dotenv.gradle' version '1.1.0' apply false
	id 'org.flywaydb.flyway' version '7.2.1' apply false

	id 'org.jlleitschuh.gradle.ktlint' version '9.4.1' apply false
	id "com.jfrog.bintray" version "1.8.5" apply false
}


apply plugin: 'base'

allprojects {
	apply plugin: 'groovy'
	apply plugin: 'java'

	apply plugin: 'org.jlleitschuh.gradle.ktlint'
	apply plugin: 'org.jlleitschuh.gradle.ktlint-idea'

	group project_group
	version project_version

	repositories {
		mavenCentral()
		jcenter()
		google()
		maven {
			url 'https://dl.bintray.com/kotlin/ktor'
		}
		maven {
			url 'https://dl.bintray.com/kotlin/kotlinx'
		}
		maven {
			url 'https://maven.pkg.github.com/ScriptonBasestar-toolbox'
		}
	}

	ext {
		snippetsDir = 'build/generated-snippets'
		springBootAdminVersion = '2.3.1'
		springCloudVersion = 'Hoxton.SR9'
		testcontainersVersion = '1.15.0'
	}

	dependencies {
		ktlintRuleset 'com.pinterest:ktlint:0.40.0'
	}

	ktlint {
		debug = true
		verbose = true
	}
}

init.dependsOn(addKtlintCheckGitPreCommitHook)

subprojects{
	apply plugin: 'java'
	apply plugin: 'groovy'
	apply plugin: 'kotlin'

	apply plugin: 'org.jetbrains.kotlin.jvm'
	apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
	apply plugin: 'org.jetbrains.kotlin.plugin.allopen'
	apply plugin: 'org.jetbrains.kotlin.plugin.spring'

	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	apply plugin: 'org.asciidoctor.convert'

	dependencyManagement {
		imports {
//            mavenBom 'io.spring.platform:platform-bom:1.0.1.RELEASE'
			mavenBom "org.testcontainers:testcontainers-bom:$testcontainersVersion"
			mavenBom "de.codecentric:spring-boot-admin-dependencies:$springBootAdminVersion"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
		}
	}

	dependencies{
//		compileOnly "org.projectlombok:lombok:$lombok_version"
//		testCompileOnly "org.projectlombok:lombok:$lombok_version"

		// kotlin
		implementation 'org.jetbrains.kotlin:kotlin-reflect'
//        implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
		implementation 'org.jetbrains.kotlin:kotlin-stdlib'
		implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
		implementation 'org.jetbrains.kotlin:kotlin-test'

		// groovy
		implementation 'org.codehaus.groovy:groovy'
		implementation 'org.codehaus.groovy:groovy-json'


		// test
		developmentOnly 'org.springframework.boot:spring-boot-devtools'

		annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
		testImplementation('org.springframework.boot:spring-boot-starter-test') {
			exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
			exclude module: 'junit'
		}
		testImplementation 'io.projectreactor:reactor-test'
		testImplementation 'org.springframework.amqp:spring-rabbit-test'
		testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
		testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
		testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'org.testcontainers:junit-jupiter'
		testImplementation 'org.testcontainers:postgresql'
//        testImplementation 'org.testcontainers:r2dbc'
		testImplementation 'org.testcontainers:rabbitmq'
		testImplementation "org.testcontainers:spock:1.15.1"

		// docs
//        asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'
	}

	configurations {
		compileOnly {
//            extendsFrom(configurations.annotationProcessor.get())
			extendsFrom(annotationProcessor)
		}
	}

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
	compileKotlin {
		kotlinOptions.jvmTarget = JavaVersion.VERSION_11
		kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
//		kotlinOptions.freeCompilerArgs += '-Xjsr305=strict'
	}
	compileTestKotlin {
		kotlinOptions.jvmTarget = JavaVersion.VERSION_11
		kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
	}
	test {
		useJUnitPlatform()
//        useJUnitPlatform {
//            includeTags 'fast'
//            excludeTags 'slow'
//        }
		outputs.dir snippetsDir
	}
//    tasks.asciidoctor {
//        inputs.dir(snippetsDir)
//        dependsOn(test)
//    }
	asciidoctor {
		inputs.dir snippetsDir
//        attributes 'snippets': snippetsDir
//        dependsOn junitPlatformTest
		dependsOn test
	}
	bootJar {
		dependsOn asciidoctor
		from("${asciidoctor.outputDir}/html5") {
			into 'static/docs'
		}
	}
}
